// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// GitHub Issue Labels can be imported using an ID made up of `repository:name`, e.g.
//
// ```sh
//  $ pulumi import github:index/issueLabel:IssueLabel panic_label terraform:panic
// ```
type IssueLabel struct {
	pulumi.CustomResourceState

	// A 6 character hex code, **without the leading #**, identifying the color of the label.
	Color pulumi.StringOutput `pulumi:"color"`
	// A short description of the label.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Etag        pulumi.StringOutput    `pulumi:"etag"`
	// The name of the label.
	Name pulumi.StringOutput `pulumi:"name"`
	// The GitHub repository
	Repository pulumi.StringOutput `pulumi:"repository"`
	// The URL to the issue label
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewIssueLabel registers a new resource with the given unique name, arguments, and options.
func NewIssueLabel(ctx *pulumi.Context,
	name string, args *IssueLabelArgs, opts ...pulumi.ResourceOption) (*IssueLabel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Color == nil {
		return nil, errors.New("invalid value for required argument 'Color'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	var resource IssueLabel
	err := ctx.RegisterResource("github:index/issueLabel:IssueLabel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssueLabel gets an existing IssueLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssueLabel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssueLabelState, opts ...pulumi.ResourceOption) (*IssueLabel, error) {
	var resource IssueLabel
	err := ctx.ReadResource("github:index/issueLabel:IssueLabel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IssueLabel resources.
type issueLabelState struct {
	// A 6 character hex code, **without the leading #**, identifying the color of the label.
	Color *string `pulumi:"color"`
	// A short description of the label.
	Description *string `pulumi:"description"`
	Etag        *string `pulumi:"etag"`
	// The name of the label.
	Name *string `pulumi:"name"`
	// The GitHub repository
	Repository *string `pulumi:"repository"`
	// The URL to the issue label
	Url *string `pulumi:"url"`
}

type IssueLabelState struct {
	// A 6 character hex code, **without the leading #**, identifying the color of the label.
	Color pulumi.StringPtrInput
	// A short description of the label.
	Description pulumi.StringPtrInput
	Etag        pulumi.StringPtrInput
	// The name of the label.
	Name pulumi.StringPtrInput
	// The GitHub repository
	Repository pulumi.StringPtrInput
	// The URL to the issue label
	Url pulumi.StringPtrInput
}

func (IssueLabelState) ElementType() reflect.Type {
	return reflect.TypeOf((*issueLabelState)(nil)).Elem()
}

type issueLabelArgs struct {
	// A 6 character hex code, **without the leading #**, identifying the color of the label.
	Color string `pulumi:"color"`
	// A short description of the label.
	Description *string `pulumi:"description"`
	// The name of the label.
	Name *string `pulumi:"name"`
	// The GitHub repository
	Repository string `pulumi:"repository"`
}

// The set of arguments for constructing a IssueLabel resource.
type IssueLabelArgs struct {
	// A 6 character hex code, **without the leading #**, identifying the color of the label.
	Color pulumi.StringInput
	// A short description of the label.
	Description pulumi.StringPtrInput
	// The name of the label.
	Name pulumi.StringPtrInput
	// The GitHub repository
	Repository pulumi.StringInput
}

func (IssueLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issueLabelArgs)(nil)).Elem()
}

type IssueLabelInput interface {
	pulumi.Input

	ToIssueLabelOutput() IssueLabelOutput
	ToIssueLabelOutputWithContext(ctx context.Context) IssueLabelOutput
}

func (*IssueLabel) ElementType() reflect.Type {
	return reflect.TypeOf((*IssueLabel)(nil))
}

func (i *IssueLabel) ToIssueLabelOutput() IssueLabelOutput {
	return i.ToIssueLabelOutputWithContext(context.Background())
}

func (i *IssueLabel) ToIssueLabelOutputWithContext(ctx context.Context) IssueLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueLabelOutput)
}

type IssueLabelOutput struct {
	*pulumi.OutputState
}

func (IssueLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssueLabel)(nil))
}

func (o IssueLabelOutput) ToIssueLabelOutput() IssueLabelOutput {
	return o
}

func (o IssueLabelOutput) ToIssueLabelOutputWithContext(ctx context.Context) IssueLabelOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IssueLabelOutput{})
}
