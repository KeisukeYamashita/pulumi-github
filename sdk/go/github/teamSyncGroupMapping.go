// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource allows you to create and manage Identity Provider (IdP) group connections within your GitHub teams.
// You must have team synchronization enabled for organizations owned by enterprise accounts.
//
// To learn more about team synchronization between IdPs and Github, please refer to:
// https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/synchronizing-teams-between-your-identity-provider-and-github
//
// ## Import
//
// GitHub Team Sync Group Mappings can be imported using the GitHub team `slug` e.g.
//
// ```sh
//  $ pulumi import github:index/teamSyncGroupMapping:TeamSyncGroupMapping example some_team
// ```
type TeamSyncGroupMapping struct {
	pulumi.CustomResourceState

	Etag pulumi.StringOutput `pulumi:"etag"`
	// An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.
	// ***
	Groups TeamSyncGroupMappingGroupArrayOutput `pulumi:"groups"`
	// Slug of the team
	TeamSlug pulumi.StringOutput `pulumi:"teamSlug"`
}

// NewTeamSyncGroupMapping registers a new resource with the given unique name, arguments, and options.
func NewTeamSyncGroupMapping(ctx *pulumi.Context,
	name string, args *TeamSyncGroupMappingArgs, opts ...pulumi.ResourceOption) (*TeamSyncGroupMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamSlug == nil {
		return nil, errors.New("invalid value for required argument 'TeamSlug'")
	}
	var resource TeamSyncGroupMapping
	err := ctx.RegisterResource("github:index/teamSyncGroupMapping:TeamSyncGroupMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamSyncGroupMapping gets an existing TeamSyncGroupMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamSyncGroupMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamSyncGroupMappingState, opts ...pulumi.ResourceOption) (*TeamSyncGroupMapping, error) {
	var resource TeamSyncGroupMapping
	err := ctx.ReadResource("github:index/teamSyncGroupMapping:TeamSyncGroupMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamSyncGroupMapping resources.
type teamSyncGroupMappingState struct {
	Etag *string `pulumi:"etag"`
	// An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.
	// ***
	Groups []TeamSyncGroupMappingGroup `pulumi:"groups"`
	// Slug of the team
	TeamSlug *string `pulumi:"teamSlug"`
}

type TeamSyncGroupMappingState struct {
	Etag pulumi.StringPtrInput
	// An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.
	// ***
	Groups TeamSyncGroupMappingGroupArrayInput
	// Slug of the team
	TeamSlug pulumi.StringPtrInput
}

func (TeamSyncGroupMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamSyncGroupMappingState)(nil)).Elem()
}

type teamSyncGroupMappingArgs struct {
	// An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.
	// ***
	Groups []TeamSyncGroupMappingGroup `pulumi:"groups"`
	// Slug of the team
	TeamSlug string `pulumi:"teamSlug"`
}

// The set of arguments for constructing a TeamSyncGroupMapping resource.
type TeamSyncGroupMappingArgs struct {
	// An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.
	// ***
	Groups TeamSyncGroupMappingGroupArrayInput
	// Slug of the team
	TeamSlug pulumi.StringInput
}

func (TeamSyncGroupMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamSyncGroupMappingArgs)(nil)).Elem()
}

type TeamSyncGroupMappingInput interface {
	pulumi.Input

	ToTeamSyncGroupMappingOutput() TeamSyncGroupMappingOutput
	ToTeamSyncGroupMappingOutputWithContext(ctx context.Context) TeamSyncGroupMappingOutput
}

func (TeamSyncGroupMapping) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamSyncGroupMapping)(nil)).Elem()
}

func (i TeamSyncGroupMapping) ToTeamSyncGroupMappingOutput() TeamSyncGroupMappingOutput {
	return i.ToTeamSyncGroupMappingOutputWithContext(context.Background())
}

func (i TeamSyncGroupMapping) ToTeamSyncGroupMappingOutputWithContext(ctx context.Context) TeamSyncGroupMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamSyncGroupMappingOutput)
}

type TeamSyncGroupMappingOutput struct {
	*pulumi.OutputState
}

func (TeamSyncGroupMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamSyncGroupMappingOutput)(nil)).Elem()
}

func (o TeamSyncGroupMappingOutput) ToTeamSyncGroupMappingOutput() TeamSyncGroupMappingOutput {
	return o
}

func (o TeamSyncGroupMappingOutput) ToTeamSyncGroupMappingOutputWithContext(ctx context.Context) TeamSyncGroupMappingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TeamSyncGroupMappingOutput{})
}
